终端切换路径 cd 路径名（或者在目标的路径空白处shift右键，点击“在此处打开Powershell”窗口）

关闭（重启）服务器 Ctrl+C

终端使用js代码：node js文件名

终端快捷键：
    ↑，快速定位到上次执行的命令
    tab，快速补全路径
    esc，快速清空当前已输入的命令
    输入cls，快速清空当前终端
    cd，更改路径

fs文件模块
    导入方法 const fs=require('fs');
    fs.readFile()方法，用来读取指定文件的内容
        格式：fs.readFile(路径[,编码格式],回调函数) （编码格式可选）
        fs.readFile('./file/1.txt','utf8',function(err（错误）,dataStr（输出结果）){
            函数内容
        })
        如果读取成功，err的值为null
        如果读取失败，dataStr的值为undefined
    fs.writeFile()方法，用来向指定的文件中写入内容
        格式：fs.writeFile(路径,写入内容[,编码格式],回调函数) （编码格式可选）
        fs.writeFile('./file/1.txt','Hello','utf8',function(err（错误）){
            函数内容
        })
        如果写入成功，err的值为null
        如果写入失败，err的值为一个错误对象

在使用fs模块操作文件时，如果提供的操作路径是以./或../开头的相对路径时，很容易出现路径动态拼接错误的问题。原因：代码在运行的时候，会以执行node命令所在的目录，动态拼接出被操作文件的完整路径

__dirname表示当前js文件所在的目录

path.join()：可以将多个路径片段拼接为完整的路径字符串
path.basename(路径名,.扩展名)：可以从一个路径文件中，获取到文件的名称部分，若添加第二个参数，则会删除掉与第二个参数相同的扩展名
path.extanme(路径名)：可以获取路径中的扩展名部分

当前电脑服务器的ip地址：127.0.0.1 域名：localhost

端口号
	1.每个端口号不能同时被多个web服务占用
	2.在实际应用中，URL中的80端口可以被省略

创建基本服务器：
	1.导入http模块
	const http=require('http');
	2.创建web服务器实例
	const sever=http.createServer();
	3.为服务器实例绑定request事件，监听客户端的请求
	sever.on('request',(req,res)=>{
	    console.log(wang);
	})
	4.启动服务器
	sever.listen(80,()=>{
	    console.log('http');
	})

22.module.exports对象的使用
    2.module.exports对象
        在自定义模块中，可以使用module..exports对象，将模块内的成员共享出去，供外界使用。
        外界用require()方法导入自定义模块时，得到的就是module.exports所指向的对象。
    
    3.共享成员时的注意点
        使用require()方法导入模块时，导入的结果，永远以module.exports指向的对象为准。比如：
            module.exports.username='zs'
            module.exports={
                name:'xd'
                sayHello(){
                    console.log()
                }
            }
            前面的module.exports.username='zs'就不会被导入了

23.exports对象
    4.exports对象
        由于module.exports单词写起来比较复杂，为了简化向外共享成员的代码，Node提供了exports对象。默认情况
        下，exports和module.exports指向同一个对象。最终共享的结果，还是以module.exports指向的对象为准。

24.exports和module.exports的使用误区
    时刻谨记，require()模块时，得到的永远是module.exports指向的对像象

在项目中安装包的命令
npm install 包的完整名称 简写：npm i 包的完整名称
卸载包 npm uninstall 包的完整名称（不能简写）

创建包管理配置文件
	npm init -y（该命令只能在英文目录下成功运行。所以，项目文件名一定要使用英文文件名，不要使用中文，不能出现空格）

一次性安装所有的包（package.json中的所有包）
	npm install 简写：npm i
	
deDependencies
如果某些包只在项目开发阶段会用到，在项目上线后不会用到，建议把这些包记录到deDependencies节点中。与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到dependencies节点中
将包记录到deDependencies的写法：
	npm install 包名 --save-dev(--save-dev可以写到包名的前面)（简写：npm i 包名 -D）
	
切换npm的下包镜像源
	#查看当前的下包镜像源
	npm config get registry
	#将下包的镜像源切换为淘宝镜像源
	npm config set registry=http://registry.npm.taobao.org/
	#检查镜像源是否下载成功
	npm conifg get registry

nrm：为了更方便的切换包的下载源，我们可以安装一个nrm这个小工具，利用nrm提供的终端命令，可以快速查看和切换下载包的镜像源
	#通过npm包管理器，将nrm安装为全局可用的工具
	npm i nrm -g
    #卸载nrm
    npm uninstall nrm -g
	#查看所有可用的镜像源
	nrm ls
	#将下包的镜像源切换为taobao镜像
	nrm use taobao

包的分类
    1.项目包 2.全局包
    项目包分为开发依赖包（devDependencies）以及核心依赖包（dependencies）
    在执行npm istall 命令时，如果提供了-g参数，则会把包安装为全局包
    全局包默认会被安装到C:\User\用户目录\AppData\Roaming\npm\node_modules目录下

    i5ting toc
    i5ting_toc是一个可以把md文档转为html页面的小工具，使用步骤如下：
        #将i5 ting_toc安装为全局包
        npm install -g i5ting_toc
        #调用i5 ting_toc,轻松实现md转html的功能
        i5 ting_toc -f 要转换的md文件路径 -o

规范包的结构
在清楚了包的概念、以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构
一个规范的包，它的组成结构，必须符合以下3点要求：
    ①包必须以单独的目录而存在
    ②包的顶级目录下要必须包含package.json这个包管理配置文件
    ③package.json中必须包含name,version,main这三个属性，分别代表包的名字、版本号、包的入口。

开发属于自己的包
    初始化包的基本结构
        ①新建itheima-tools文件夹，作为包的根目录
        ②在itheima-tools文件夹中，新建如下三个文件：
            package.json（包管理配置文件）
            index.js（包的入口文件）
            README.md（包的说明文档）
        
    初始化package.json
        {
            "name":"itheima-tools",   //包名
            "version":"1.0.0",   //版本号
            "main":"index.js",   //包的入口文件
            "description'":"提供了格式化时间，HTMLEscapef的功能"，   //包的描述信息
            "keywords":["itheima","dateFormat","escape"],   //包的关键字
            "license":"ISC"   //包所遵循的开源许可协议
        }
    包的说明文档
        包的根目录中的README.md文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以markdown的格式写出来，方便用户参考。
        README文件中具体写什么内容，没有强制性的要求；只要能够清晰地把包的作用、用法、注意事项等描述清楚即可。
        我们所创建的这个包的README.md文档中，会包含以下6项内容：
            安装方式
            导入方式
            格式化时间
            转义HTML中的特殊字符
            还原HTML中的特殊字符
            开源协议
    
关于注册和登录发布包请查看36视频

37.模块的加载机制
    4.1优先从缓存中加载
        模块在第一次加载后会被缓存。这也意味着多次调用require()不会导致模块的代码被执行多次。
        注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。
    4.2内置模块的加载机制
        内置模块是由Node.js官方提供的模块，内置模块的加载优先级最高。
        例如，require('fs')始终返回内置的fs模块，即使在node modules目录下有名字相同的包也叫做fs。
    4.3自定义模块的加载机制
        使用require()加载自定义模块时，必须指定以./或../开头的路径标识符。在加载自定义模块时，如果没有指定./或../
        这样的路径标识符，则node会把它当作内置模块或第三方模块进行加载。
        同时，在使用require()导入自定义模块时，如果省略了文件的扩展名，则Node.js会按顺序分别尝试加载以下的文件：
            ①按照确切的文件名进行加载
            ②补全js扩展名进行加载
            ③补全json扩展名进行加载
            ④补全.node扩展名进行加截
            ⑤加载失败，终端报错
    4.4第三方模块的加载机制
        如果传递给require()的模块标识符不是一个内置模块，也没有以'./'或‘../'开头，则Node.js会从当前模块的父
        目录开始，尝试从/node modules文件夹中加载第三方模块。
        如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。
        例如，假设在'C.Users\itheima\project\foo,js'文件里调用了require('tools'),则Node.js会按以下顺序查找：
            ①C:\Users\itheima\project\node_modules\tools
            ②C:\Users\itheima\node modules\tools
            ③C:\Users\node modules\tools
            ④C:\node modules\tools
    4.5目录作为模块
        当把目录作为模块标识符，传递给require()进行加载的时候，有三种加载方式：
        ①在被加载的目录下查找一个叫做package.json的文件，并寻找main属性，作为require()加载的入口
        ②如果目录里没有package.json文件，或者main入口不存在或无法解析，则Node.js将会试图加载目录下的index.js文件。
        ③如果以上两步都失败了，则Node,js会在终端打印错误消息，报告模块的缺失：Error:Cannot find module 模块名

38.认识Express
    1.什么是Express
        官方给出的概念：Express是基于Node.js平台，快速、开放、极简的Web开发框架。
        通俗的理解：Express的作用和Node,js内置的http模块类似，是专门用来创建Web服务器的。
        Express的本质：就是一个npm上的第三方包，提供了快速创建Web服务器的便捷方法。
    2.进一步理解Express
        思考：不使用Express能否创建Web服务器？
        答案：能，使用Node.js提供的原生http模块即可。
        思考：既生瑜何生亮(有了http内置模块，为什么还有用Express)?
        答案：http内置模块用起来很复杂，开发效率低；Express是基于内置的http模块进一步封装出来的，能够极大的提高开发效率。
        思考：http内置模块与Express是什么关系？
        答案：类似于浏览器中Web API和jQuery的关系。后者是基于前者进一步封装出来的。
    3.Express能做什么
        对于前端程序员来说，最常见的两种服务器，分别是：
            Web网站服务器：专门对外提供Web网页资源的服务器。
            API接口服务器：专门对外提供API接口的服务器。
            使用Express,我们可以方便、快速的创建Web网站的服务器或API接口的服务器。

    1.安装
        npm i express
    2.创建基本的web服务器
        //1.导入express
        const express =require('express')
        //2.创建web服务器
        const app=express()
        //3,调用app.listen(端口号，启动成功后的回调函数)，启动服务器
        app.listen(80,（）=>
        console.log('express server running at http://127.0.0.1')
        })

39.监听get和post请求
    1.监听GET请求
        通过app.get()方法，可以监听客户端的GET请求，具体的语法格式如下：
        //参数1：客户端请求的URL地址
        //参数2：请求对应的处理函数
        //  req:请求对像（包含了与请求相关的属性与方法）
        //  res:响应对像（包含了与响应相关的属性与方法）
        app.get('请求URL',function(req,res){/*处理函数*/})
    2.监听POST请求
        通过app.post()方法，可以监听客户端的POST请求，具体的语法格式如下：
        参数1：客户端请求的URL地址
        参数2：请求对应的处理函数
            req:请求对像（包含了与请求相关的属性与方法）
            res:响应对像（包含了与响应相关的属性与方法）
        app.post('请求URL',function(req,res){/*处理函数*/})
    3.把内容响应给客户端
        通过res.send()方法，可以把处理好的内容，发送给客户端：
        app.get('/user',(req,res)=>
            //向客户端发送JSON对象
            res.send({name:'zs',age:20,gender:'}
        })
        app.post('/user',(req,res)=>{
            //向客户端发送文本内容
            res.send('请求成功')
        })
    4.通过req.query对象，可以访问到客户端通过查询字符串的形式，发送到服务器的参数
        app.get('/',(req,res)=>
            //req.query默认是一个空对象
            //客户端使用？name=zs&age=20这种查询字符串形式，发送到服务器的参数，
            //可以通过req.query对像访问到，例如：
            //req.query.name
            req.query.age
            console.log(req.query)
        })
    5.通过req.params对像，可以访问到URL中，通过：匹配到的动态参数：
        比如/user/:id通过get请求http://127.0.0.1/user/2
        返回结果为
        {
            id:2
        }

        如果有多个动态参数，则要写成/user/:id/:username

40.静态资源处理
    1.express.static（）
        express提供了一个非常好用的函数，叫做express.static(),通过它，我们可以非常方便地创建一个静态资源服务器，
        例如，通过如下代码就可以将public目录下的图片、CSS文件、JavaScript文件对外开放访问了：
            app.use(express.static(文件夹路径))
        注意：Express在指定的静态目录中查找文件，并对外提供资源的访问路径。
        因此，存放静态文件的目录名不会出现在URL中。
        
    2.托管多个静态资源目录
        如果要托管多个静态资源目录，请多次调用express..static()函数：
            app.use(express.static('public'))
            app.use(express.static('files'))
        访问静态资源文件时，express.static()函数会根据目录的添加顺序查找所需的文件。

    3.挂载路径前缀
        如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式：
            app.use("/public",express.static("public"))

41.安装并使用nodemon
    1.为什么要使用nodemon
        在编写调试Node.js项目的时候，如果修改了项目的代码，则需要频繁的手动close掉，然后再重新启动，非常繁琐。
        现在，我们可以使用noderon(https://lwww.npmjs.com/package/nodemon)这个工具，它能够监听项目文件
        的变动，当代码被修改后，nodemon会自动帮我们重启项目，极大方便了开发和调试。

    2.安装nodemon
        在终端中，运行如下命令，即可将nodemon安装为全局可用的工具：
        npm install -g nodemon

    3.使用nodemon
        当基于Node.js编写了一个网站应用的时候，传统的方式，是运行node app.js命令，来启动项目。这样做的坏处是：
        代码被修改之后，需要手动重启项目。
        现在，我们可以将node命令替换为nodemon命令，使用nodemon app.js来启动项目。这样做的好处是：代码
        被修改之后，会被nodemon监听到，从而实现自动重启项目的效果。

42.Express路由
    1.什么是路由
        广义上来讲，路由就是映射关系

    3.Express中的路由
        在Express中，路由指的是客户端的请求与服务器处理函数之间的映射关系。
        Express中的路由分3部分组成，分别是请求的类型、请求的URL地址、处理函数，
        格式如下：
            app.METHOD(PATH,HANDLER)

    4.Express中的路由的例子
        /匹配GET请求，且请求URL为/
         app.get('/',function (req,res){
            res.send('Hello World!')
        })
        
        //四配POST请求，且请求URL为/
         app.post('/',function (req,res){
            res.send('Got a POST request')
        })

    5.路由的匹配过程
        每当一个请求到达服务器之后，需要先经过路由的匹配，只有匹配成功之后，才会调用对应的处理函数。
        在匹配时，会按照路由的顺序进行匹配，如果请求类型和请求的URL同时匹配成功，则Express会将这次请求，转
        交给对应的function函数进行处理。
        路由匹配的注意点：
            1.按照定义的先后顺序进行匹配
            2.请求类型和请求的URL同时匹配成功，才会调用对应的处理函数

    6.路由的使用
        最简单的用法
            在Express中使用路由最简单的方式，就是把路由挂载到app上，如：
                app.get('/',function(req,res){})

43.模块化路由
    为了方便对路由进行模块化的管理，Express不建议将路由直接挂载到app上，而是推荐将路由抽离为单独的模块。
        将路由抽离为单独模块的步骤斁如下：
            ①创建路由模块对应的.js文件
            ②调用express.Router()函数创建路由对象
            ③向路由对象上挂载具体的路由
            ④使用module.exports向外共享路由对像象
            ⑤使用app.use()函数注册路由模装

    注册路由模块
        //导入路由模块
        const userRouter=require(路由模块路径)
        //使用app.use()注册路由模块
        app.use(userRouter)
        注意：app.use()函数的作用，就是用来注册全局中间件

    为路由模块添加前缀
        类似于托管静态资源时，为静态资源统一挂载访问前缀一样，路由模块添加前缀的方式也非常简单：
        //1.导入路由模块
            const userRouter=require('./router/user.js')
        //2.使用app.use（）注册路由模块，并添加统一的访问前缀/api
            app.use('/api',userRouter)

44.中间件
    1.什么是中间件
        中间件(Middleware),特指业务流程的中间处理环节。

    3.Express中间件的调用流程
        当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行预处理。

    4.Express中间件的格式
        Express的中间件，本质上就是一个function处理函数，Express中间件的格式如下：
            app.get('/',function(req,res,next){
                next()
            })
        注意：中间件函数的形参列表中，必须包含next参数。而路由处理函数中只包含req和res。

    5.next函数的作用
        next函数是实现多个中间件连续调用的关键，它表示把流转关系转交给下一个中间件或路由。

45.全局生效的中间件
    2.全局生效的中间件
        客户端发起的任何请求，到达服务器之后，都会触发的中间件，叫做全局生效的中间件。
        通过调用app.use（中间件函数），即可定义一个全局生效的中间件，示例代码如下：