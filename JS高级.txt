var声明的变量具有块级作用域,let具有块级作用域
var声明的变量,可以重新定义声明,let不可以
var声明的变量,相当于为window添加属性,let直接就是变量
var 和 let 都可以只定义,不赋值

const声明的变量不可以改变,且必须初始化赋值
建议:
  1.常量名都采用大写,纯大写
  2.一般固定不变的值使用常量

闭包:一个作用域有权访问另一个作用域中的局部变量
  作用:延伸变量的使用范围
    
    function father(){
      let num =1
      return function(){
        console.log(num)
      }
    }
    外部便可以通过里面的函数来访问num

  过渡闭包会导致内存泄漏

JS对象
  extends : 继承
  constructor : 构造函数
  super(参数) : 
    将子类构造函数中的数据传给父类的构造函数
    让子类强行调用父类中的函数,如say.父函数名
    子类在构造函数中使用super,必须放到this前面(必须先调用父类的构造方法,再使用子类的构造方法)

构造函数格式
	function 类名(uname,age){
		this.uname=uname
		this.age = age
		this.song = function(){
			console.log()
		}
	}
构造函数虽然好用,但存在内存浪费的问题,比如上面的构造函数,实例化对象的时候会额外开辟内存空间来存放其内部的sing函数,可以将函数放入原型对象中,如:
	Star.prototype.sing = function(){}
	在对象身上系统自己添加了一个__proto__,指向我们构造函数的原型对象prototype

构造函数中的this和原型对象中的this都指向实例对象

call()
1.可以用来调用函数,如:fn.call()
2.可以改变这个函数this的指向,如:fn.call(对象名) 如果函数需要传入参数,则在对象名后面添加参数

构造函数的继承
function Fahter(uname,age){
  this.uname = uname
  this.age = age
}

function Son(uname,age){
  Fahter.call(this,uname,age)
}

类的本质还是函数,只不过是构造函数的另一种写法

数组方法:
  forEach 遍历
    array.forEach(function(value,index,array){})
  map 遍历,会返回一个新的数组,需要重新接收
    array.map(function(value,index,array){})
  filter  过滤
    array.filter(function(value,index,array){return 筛选条件}) 返回数组,需要一个数组接收结果
  some  检测数组中的元素是否满足指定的元素,也就是是否有满足条件的元素
    array.some(function(value,index,array){return 条件}) 返回布尔值
  every  检测数组中的元素是否全部满足指定的条件
    array.every(function(value,index,array){return 条件}) 返回布尔值

forEach 和 some都可以遍历数组,但some找到目标后就会停止遍历(结尾需要return true)

trim() 用于删除字符串前后的空格

Object.defineProperty(对象名,属性,descriptor)
  descriptor说明:
    value:设置属性的值,默认为undefined
    writable:值是否可以被重写,默认为false
    enumerable:目标属性能否被枚举(遍历),默认为false
    configurable:目标属性能否被删除或是否可以再次修改特性,默认为false

Object.keys()用于获取对象自身的所有属性
  效果类似于for...in
  返回一个由属性名组成的数组

所有函数都是Function的实例(对象),函数也属于对象

函数this指向
  普通函数 window
  构造函数 实例对象
  对象方法 该方法所属的对象
  事件绑定的方法 绑定事件的对象
  定时器函数 window
  立即执行函数 window

apply也可以像call一样调用函数,也可以改变函数内部this的指向,但他后面的参数必须是数组(伪数组)

bind(有用,可以多看看)
  不会调用原来的函数,可以改变原来函数内部的指向
  返回的是原函数改变this后的新函数
  如 var f=fn.bind(o) fn是老函数,产生的新函数用f接收

严格模式
  在脚本开头或函数体内部的开头加上"use strict"即刻进入严格模式(引号不能忘)
  1.变量名必须先声明再使用
  2.不能随意删除已经声明好的变量
  3.全局作用域中函数的this是undefined
  4.严格模式下,如果构造函数不用new调用,this会报错
  5.定时器的this还是指向window
  6.严格模式下的函数参数不允许有重名

高阶函数
  指对其他函数进行操作的函数,它接收函数作为参数或将函数作为返回值输出

闭包
  指有权访问另一个函数作用域中变量的函数

浅拷贝:
  将一个对象内的数据拷贝到另一个对象,如果对象内有对象,则会拷贝其地址
  ES6浅拷贝语法糖:Object.assign(对象,原对象)

深拷贝
  deepCopy(属性名(属性名,非简单数据类型对象属性))